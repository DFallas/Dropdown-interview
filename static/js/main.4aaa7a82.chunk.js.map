{"version":3,"sources":["logo.svg","components/Dropdown.jsx","components/Arrow.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dropdown","props","state","isOpen","wrapperRef","setWrapperRef","element","clickOrTouchOutside","bind","hideMenu","toggle","this","setState","e","contains","target","document","addEventListener","removeEventListener","animationClass","animation","className","onClick","ref","React","Children","map","children","child","type","DropDownOptionList","cloneElement","visible","Component","DropDownItem","id","Arrow","defaultClass","position","App","useState","currentOption","setCurrentOption","items","name","text","dropdownChange","item","dropdownText","filter","src","logo","alt","index","key","Date","now","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4aaa7a82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react' ;\nimport '../styles/Dropdown.css';\n\nexport class Dropdown extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isOpen: false\n        }\n        this.wrapperRef = null;\n        this.setWrapperRef = element => {\n            this.wrapperRef = element;\n        }\n        this.clickOrTouchOutside = this.clickOrTouchOutside.bind(this);\n        this.hideMenu = this.hideMenu.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n\n    hideMenu(){\n        this.setState({\n            isOpen: false\n        })\n    }\n\n    toggle(){\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n\n    clickOrTouchOutside(e){\n        \n        if(this.wrapperRef && !this.wrapperRef.contains(e.target)){\n            this.hideMenu();\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener('mousedown', this.clickOrTouchOutside, true);\n        document.addEventListener('touchstart', this.clickOrTouchOutside, true);\n   }\n\n    componentWillUnmount(){\n        document.removeEventListener('mousedown', this.clickOrTouchOutside);\n        document.removeEventListener('touchstart', this.clickOrTouchOutside);\n    }\n\n    render() {\n        const animationClass = this.props.animation ? '__animated':'';\n        return (\n            <div \n            className={`__dropdown-menu ${this.props.className} ${this.state.isOpen ?' visible':''} ${animationClass}` }\n            onClick={this.toggle}\n            ref={this.setWrapperRef}\n            >\n            {\n              React.Children && React.Children.map(this.props.children, (child)=>{\n                if(child.type === DropDownOptionList ){\n                  return React.cloneElement(child, {\n                      visible: this.state.isOpen,\n                      animation: this.props.animation\n                    }, \n                  )\n                } else {\n                  return child;\n                }\n              })\n            }\n            </div>\n          )\n    };\n} \n\nexport const DropDownOptionList = ({\n    visible, ...props\n    })=>{\n    const animationClass = props.animation ? '__animated':'';\n    return(\n      <ul className={`__dropdown-list ${visible ?' visible':''} ${props.className ? props.className:''} ${animationClass}`}> \n      {props.children}\n      </ul>\n    )\n  }\n\nexport const DropDownItem = ({...props})=>{\n    return (\n      <li {...props}\n      className={`__dropdown-item ${props.className}`}\n      id={props.id} \n      onClick={props.onClick}\n      >\n      {props.children}\n      </li>\n    )\n  }","import React from 'react';\n\nconst Arrow = ({\n    ...props\n})=>{\n\n    let defaultClass = props.position === 'up'? 'arrow' : `arrow ${props.position}`;\n    return (\n        <div className={`${defaultClass} ${props.className ? props.className:''}`}/>\n    );\n}\nexport default Arrow;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport { Dropdown, DropDownOptionList, DropDownItem } from './components/Dropdown';\nimport Arrow from './components/Arrow';\nimport './App.css';\n\nfunction App() {\n  let [currentOption, setCurrentOption] = useState('');\n\n  let items = [\n    {\n      name:'item-1',\n      text: 'Item 1 has a very very big text in it'\n    },\n    {\n      name:'item-2',\n      text: 'Item 2'\n    },\n    {\n      name:'item-3',\n      text: 'Item 3'\n    },\n    {\n      name:'none',\n      text: 'none'\n    },\n  ];\n\n  const dropdownChange = (item) => {\n    setCurrentOption(item.name);\n  }\n\n  let dropdownText = (!currentOption || currentOption === 'none') ? 'Dropdown': items.filter((item)=>currentOption===item.name)[0].text;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className='signature'>\n          David Fallas's LogN interview\n        </p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <div className='column'>\n        <h3>General Base DropDown Component</h3>\n        <Dropdown className=''>\n            <span className='elipsis'>{dropdownText}</span>\n            <DropDownOptionList>\n            {\n              items.map((item, index)=>{\n                return (\n                  <DropDownItem key={`${item.name}-${index}-${Date.now()}`} onClick={()=>dropdownChange(item)}>\n                    <span className='elipsis'>{item.text}</span>\n                  </DropDownItem>\n        \n                );\n              })\n            }\n            </DropDownOptionList>\n          </Dropdown>\n      </div>\n\n      <div className='column'>\n        <h3>Pixel Perfect Version</h3>\n        <div className ='row'> \n          <p>Testing layout</p>\n          <Dropdown className='pixel-perfect'>\n            <span className='elipsis'>{dropdownText}</span>\n            <Arrow className='dropdown' position={'down'} color={'white'}/>\n            <DropDownOptionList>\n            {\n              items.map((item, index)=>{\n                return (\n                  <DropDownItem key={`${item.name}-${index}-${Date.now()}`} onClick={()=>dropdownChange(item)}>\n                    <span className='elipsis'>{item.text}</span>\n                  </DropDownItem>\n        \n                );\n              })\n            }\n            </DropDownOptionList>\n          </Dropdown>\n        </div>\n        <div className ='row'> \n          <p>With Animation</p>\n          <Dropdown className='pixel-perfect' animation={true}>\n            <span className='elipsis'>{dropdownText}</span>\n            <Arrow className='dropdown' position={'down'} color={'white'}/>\n            <DropDownOptionList>\n            {\n              items.map((item, index)=>{\n                return (\n                  <DropDownItem key={`${item.name}-${index}-${Date.now()}`} onClick={()=>dropdownChange(item)}>\n                    <span className='elipsis'>{item.text}</span>\n                  </DropDownItem>\n        \n                );\n              })\n            }\n            </DropDownOptionList>\n          </Dropdown>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}